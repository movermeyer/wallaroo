# install python for full ansible support
- hosts: tag_Project_{{ cluster_project_name | replace('-', '_') }}:&tag_ClusterName_{{ cluster_name | replace('-', '_') }}:&{{ aws_region }}
  gather_facts: False
  tasks:
  - name: install python for full ansible support
    raw: apt-get install -y python
    become: yes
  - name: gather facts
    action: setup
  - name: set tsc reliable, max c-state and max cpus as boot param
    lineinfile:
      dest: /etc/default/grub.d/50-cloudimg-settings.cfg
      regexp: '(^GRUB_CMDLINE_LINUX_DEFAULT="(\s*(?!tsc)[\w=/\-\.]+)*\s*)"\s*$'
      line: '\1 tsc=reliable skew_tick=y pci=pcie_bus_perf pcie_aspm=off pcie_port_pm=off rcupdate.rcu_normal=1 rcutree.kthread_prio=50 workqueue.power_efficient=0 idle=nomwait audit=0 nosoftlockup=0 nohz_full=1-{{ ((ansible_processor_vcpus/2)-1) | int }} rcu_nocbs=1-{{ ((ansible_processor_vcpus/2)-1) | int }} rcu_nocb_poll transparent_hugepage=never workqueue.watchdog_thresh=0 clocksource=tsc intel_idle.max_cstate=1 maxcpus={{ ((ansible_processor_vcpus/2)+1) | int }} nr_cpus={{ ((ansible_processor_vcpus/2)+1) | int }} possible_cpus={{ ((ansible_processor_vcpus/2)+1) | int }} {{ "isolcpus=1-" + (((ansible_processor_vcpus/2)-1) | int) | string if system_cpus is defined and isolcpus is defined and isolcpus == "true" else "" }}"'
      backrefs: true
      state: present
      backup: true
    register: gfile
    become: yes
  - name: update grub
    command: update-grub
    become: yes
    when: (gfile|changed)



# create dynamic groups
- hosts: tag_Project_{{ cluster_project_name | replace('-', '_') }}:&tag_Role_follower:&tag_ClusterName_{{ cluster_name | replace('-', '_') }}:&{{ aws_region }}
  tasks:
  - name: Create a group of all followers for wallaroo
    group_by: key=wallaroo-followers
  - name: set hostname
    hostname: name=wallaroo-follower-{{ groups['wallaroo-followers'].index(inventory_hostname) + 1 }}
    become: yes

- hosts: tag_Project_{{ cluster_project_name | replace('-', '_') }}:&tag_Role_leader:&tag_ClusterName_{{ cluster_name | replace('-', '_') }}:&{{ aws_region }}
  vars:
    ethernet_interface: "{{ ansible_default_ipv4.interface }}"
  tasks:
  - name: Create a group of all leaders for wallaroo
    group_by: key=wallaroo-leaders
  - name: Set IPs for ptpd unicast
    set_fact: ptpd_destinations="{% if groups['wallaroo-followers'] is defined %}{% for host in groups['wallaroo-followers'] %}{{ hostvars[host]['ansible_' + ethernet_interface]['ipv4']['address'] }}{% if not loop.last %},{% endif %}{% endfor %}{% else %}127.0.0.1{% endif %}"
  - name: set hostname
    hostname: name=wallaroo-leader-{{ groups['wallaroo-leaders'].index(inventory_hostname) + 1 }}
    become: yes

- hosts: wallaroo-leaders:wallaroo-followers
  vars:
    ixgbevf_version: 2.16.4
    ixgbevf_tar_sha1_hash: 110fa89c30b029e946ed73105c471cf03f1767be
  roles:
  - { role: atlassian.ixgbevf, become: yes }
  tasks:
  - name: "Add follower hostnames to hosts file"
    lineinfile:
      dest: /etc/hosts
      regexp: .*wallaroo-follower-{{ groups['wallaroo-followers'].index(item) + 1 }}$
      line: "{{ hostvars[item].ansible_default_ipv4.address }} wallaroo-follower-{{ groups['wallaroo-followers'].index(item) + 1 }}"
      state: present
    become: yes
    with_inventory_hostnames: wallaroo-followers
  - name: "Add leader hostnames to hosts file"
    lineinfile:
      dest: /etc/hosts
      regexp: .*wallaroo-leader-{{ groups['wallaroo-leaders'].index(item) + 1 }}$
      line: "{{ hostvars[item].ansible_default_ipv4.address }} wallaroo-leader-{{ groups['wallaroo-leaders'].index(item) + 1 }}"
      state: present
    become: yes
    with_inventory_hostnames: wallaroo-leaders
  - name: Create a group of all hosts for wallaroo
    group_by: key=wallaroo-all
  - name: Gather ec2 facts
    action: ec2_facts
  - name: set variable for disks that can be raided
    set_fact:
      disks: "{{ hostvars[inventory_hostname]['ansible_devices'].keys() | difference(['xvda','sda']) }}"
  - name: set variable for disks that can be raided
    set_fact:
      interim_string: "{% for item in disks %}/dev/{{item}} {% endfor %}"
  - name: set variable for disks that can be raided
    set_fact:
      disks_list: "{{ interim_string.split() }}"
  - name: unmount /mnt for raid
    mount:
      name: "/mnt"
      state: absent
      src: ""
      fstype: ""
    become: yes
  - name: sysctl speed change for raid build
    sysctl:
      name: dev.raid.speed_limit_max
      value: 2000000000
      state: present
      sysctl_set: yes
      reload: yes
    become: yes
  - name: sysctl speed change for raid build
    sysctl:
      name: dev.raid.speed_limit_min
      value: 2000000000
      state: present
      sysctl_set: yes
      reload: yes
    become: yes
  - name: create /data
    file:
      path: /data
      state: directory
      mode: 0777
    become: yes

# Apply common configuration to all hosts
- hosts: wallaroo-all
  vars:
    software_raid_create_kwargs: "--run" # force the creation if there are any prompts
    software_raid_devices:
      - device: /dev/md0
        level: "{{ raid_level if raid_level is defined else '0' }}"
        components: "{{ disks_list }}"
        filesystem_type: "{{ raid_fs if raid_fs is defined else 'ext4' }}"
        mount_point: "/data"
        mount_options: "noatime,noexec,nodiratime"
        dump: 0
        passno: 0
  roles:
  - { role: common, become: yes }
  - { role: jacoelho.softwareraid, become: yes, when: disks_list | length > 0}
  tasks:
  - name: Rename ec2 instance name tag
    ec2_tag:
      region: "{{ ansible_ec2_placement_region }}"
      resource: "{{ ansible_ec2_instance_id }}"
      state: present
      tags:
        Name: "{{ cluster_name }}:{{ ansible_hostname }}"

# Configure and deploy leader servers.
- hosts: wallaroo-leaders
  vars:
    ethernet_interface: "{{ ansible_default_ipv4.interface }}"
    ptpd_role: master
    ptpd_transport: unicast
    swarm_image: swarm
    consul_image: gliderlabs/consul
    docker_users: [ ubuntu, wallaroo ]
    docker_dockerpy_version: "1.9.0"
  roles:
  - { role: ptpd, become: yes }
  - { role: docker, become: yes }

# Configure and deploy follower servers.
- hosts: wallaroo-followers
  vars:
    ethernet_interface: "{{ ansible_default_ipv4.interface }}"
    ptpd_role: slave
    ptpd_transport: unicast
    leader_ip: "{{ hostvars[groups['wallaroo-leaders'][0]]['ansible_' + ethernet_interface]['ipv4']['address'] }}"
    swarm_image: swarm
    consul_image: gliderlabs/consul
    docker_users: [ ubuntu, wallaroo ]
    docker_dockerpy_version: "1.9.0"
  roles:
  - { role: ptpd, become: yes }
  - { role: docker, become: yes }

- hosts: wallaroo-leaders:wallaroo-followers
  tasks:
  - name: change ptpd to be realtime priority
    shell: chrt -f -p 80 $(pidof ptpd)
    become: yes
  - name: unload jfs module
    modprobe:
      name: jfs
      state: absent
    become: yes
  - name: unload xfs module
    modprobe:
      name: xfs
      state: absent
    become: yes
