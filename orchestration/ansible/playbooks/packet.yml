# install python for full ansible support
- hosts: tag_{{ cluster_project_name | replace('-', '_') }}:&tag_Cluster_{{ cluster_name | replace('-', '_') }}:&{{ packet_region }}
  gather_facts: False
  tasks:
  - name: install python for full ansible support
    raw: apt-get install -y python
    become: yes

# create dynamic groups
- hosts: tag_{{ cluster_project_name | replace('-', '_') }}:&tag_Role_follower:&tag_Cluster_{{ cluster_name | replace('-', '_') }}:&{{ packet_region }}
  tasks:
  - name: Create a group of all followers for wallaroo
    group_by: key=wallaroo-followers
  - name: set hostname
    hostname: name=wallaroo-follower-{{ groups['wallaroo-followers'].index(inventory_hostname) + 1 }}
    become: yes
  - name: "Add hostname to hosts file"
    lineinfile:
      dest: /etc/hosts
      regexp: .*wallaroo-follower-{{ groups['wallaroo-followers'].index(inventory_hostname) + 1 }}$
      line: "{{ hostvars[inventory_hostname].ansible_default_ipv4.address }} wallaroo-follower-{{ groups['wallaroo-followers'].index(inventory_hostname) + 1 }}"
      state: present
    become: yes


- hosts: tag_{{ cluster_project_name | replace('-', '_') }}:&tag_Role_leader:&tag_Cluster_{{ cluster_name | replace('-', '_') }}:&{{ packet_region }}
  vars:
    ethernet_interface: "{{ ansible_default_ipv4.interface }}"
  tasks:
  - name: Create a group of all leaders for wallaroo
    group_by: key=wallaroo-leaders
  - name: Set IPs for ptpd unicast
    set_fact: ptpd_destinations="{% if groups['wallaroo-followers'] is defined %}{% for host in groups['wallaroo-followers'] %}{{ hostvars[host]['ansible_' + ethernet_interface]['ipv4']['address'] }}{% if not loop.last %},{% endif %}{% endfor %}{% else %}127.0.0.1{% endif %}"
  - name: set hostname
    hostname: name=wallaroo-leader-{{ groups['wallaroo-leaders'].index(inventory_hostname) + 1 }}
    become: yes
  - name: "Add hostname to hosts file"
    lineinfile:
      dest: /etc/hosts
      regexp: .*wallaroo-leader-{{ groups['wallaroo-leaders'].index(inventory_hostname) + 1 }}$
      line: "{{ hostvars[inventory_hostname].ansible_default_ipv4.address }} wallaroo-leader-{{ groups['wallaroo-leaders'].index(inventory_hostname) + 1 }}"
      state: present
    become: yes

- hosts: wallaroo-leaders:wallaroo-followers
  tasks:
  - name: Create a group of all hosts for wallaroo
    group_by: key=wallaroo-all
  - name: set variable for disks that can be raided
    set_fact:
      disks: "{{ hostvars[inventory_hostname]['ansible_devices'].keys() | difference(['xvda','sda','xvdb','sdb']) }}"
  - name: set variable for disks that can be raided
    set_fact:
      interim_string: "{% for item in disks %}/dev/{{item}} {% endfor %}"
  - name: set variable for disks that can be raided
    set_fact:
      disks_list: "{{ interim_string.split() }}"
  - name: unmount /mnt for raid
    mount:
      name: "/mnt"
      state: absent
      src: ""
      fstype: ""
    become: yes
  - name: sysctl speed change for raid build
    sysctl:
      name: dev.raid.speed_limit_max
      value: 2000000000
      state: present
      sysctl_set: yes
      reload: yes
    become: yes
  - name: sysctl speed change for raid build
    sysctl:
      name: dev.raid.speed_limit_min
      value: 2000000000
      state: present
      sysctl_set: yes
      reload: yes
    become: yes
  - name: create /data
    file:
      path: /data
      state: directory
      mode: 0777
    become: yes

# Apply common configuration to all hosts
- hosts: wallaroo-all
  vars:
    software_raid_create_kwargs: "--run" # force the creation if there are any prompts
    software_raid_devices:
      - device: /dev/md0
        level: "{{ raid_level if raid_level is defined else '0' }}"
        components: "{{ disks_list }}"
        filesystem_type: "{{ raid_fs if raid_fs is defined else 'ext4' }}"
        mount_point: "/data"
        mount_options: "noatime,noexec,nodiratime"
        dump: 0
        passno: 0
  roles:
  - { role: common, become: yes }
# TODO: Get raid working correctly with Packet
#  - { role: jacoelho.softwareraid, become: yes, when: disks_list | length > 0}

# Configure and deploy leader servers.
- hosts: wallaroo-leaders
  vars:
    ethernet_interface: "{{ ansible_default_ipv4.interface }}"
    ptpd_role: master
    ptpd_transport: unicast
    swarm_image: swarm
    consul_image: gliderlabs/consul
    docker_users: [ ubuntu, wallaroo ]
    docker_dockerpy_version: "1.9.0"
  roles:
  - { role: ptpd, become: yes }
  - { role: docker, become: yes }

# Configure and deploy follower servers.
- hosts: wallaroo-followers
  vars:
    ethernet_interface: "{{ ansible_default_ipv4.interface }}"
    ptpd_role: slave
    ptpd_transport: unicast
    leader_ip: "{{ hostvars[groups['wallaroo-leaders'][0]]['ansible_' + ethernet_interface]['ipv4']['address'] }}"
    swarm_image: swarm
    consul_image: gliderlabs/consul
    docker_users: [ ubuntu, wallaroo ]
    docker_dockerpy_version: "1.9.0"
  roles:
  - { role: ptpd, become: yes }
  - { role: docker, become: yes }

